# Default translation
# vim: ft=jproperties

exam-topics=Exam Topics
section-exam-topics.title=Exam Topics

t1-basics=Java Basics
t2-data-types=Working With Java Data Types
t3-operators-constructs=Using Operators and Decision Constructs
t4-arrays=Creating and Using Arrays
t5-loops=Using Loop Constructs
t6-encapsulation=Working with Methods and Encapsulation
t7-inheritance=Working with Inheritance
t8-exceptions=Handling Exceptions


t1-java-basics=Java Basics
t1-basics-h=Java Basics
t1-scope.title=Scope
t1-scope-h2=Define the scope of variables
t1-scope-memory=Used correctly, variable scope enables a program to reuse and conserve memory.
t1-scope-variables=Different kinds of variables have different scopes.
t1-scope-two=There are a two main scopes of variables in Java - determining of class and method (fields and variables).
t1-scope-variable-hiding-1=A local variable shadows an instance variable.
t1-scope-variable-hiding-2=Instance variable shadows the inherited variable from it's parent classes.
t1-scope-overriding-hiding=Instance variables are not overridden, they are hidden.
t1-scope-overriding-hiding.title=Overriding hiding example
t1-variables.title=Variables
t1-variables-h=Variables
t1-variables-4=The Java programming language defines the following kinds of variables
t1-variables-4.title=variables example
t1-var-fileds=fields
t1-var-variables=variables
t1-variable-element=A variable is a main element of the data storage in Java program.
t1-variable-memory=A variable is a memory location that may be assigned a value.
t1-variable-change=The value of a variable is changeable.
t1-variable-composite=A variable is defined by an identifier, a type, and an optional initializer. 
t1-variable-scope=The variables also have a scope (visibility / lifetime).
t1-inst-var.title=Instance Variables
t1-inst-var-h=Instance Variables
t1-inst-var-def=Instance variables are declared in a class, but outside a method, constructor or any block.


t2-data-types-h=Working With Java Data Types
t2-declare.title=Declare and initialize variables
t2-declare-h2=Declaring a Variable
t2-variables-declare=In Java, all variables must be declared before they can be used.



t3-operators-constructs-h=Using Operators and Decision Constructs

# Arrays
t4-arrays-section=Creating and Using Arrays
t4-arrays-section.title=Creating and Using Arrays
t4-arrays-h=Arrays
t4-arrays-p=Declare, instantiate, initialize and use:
t4-arrays-1d=a one-dimensional array
t4-arrays-md=multi-dimensional array
t4-arraylist=an ArrayList
t4-arrays-1d-h=One-dimensional arrays
t4-arrays-1d-object=An array is a container object that holds a fixed number of values of a single type.
t4-arrays-1d-length=The length of an array is established when the array is created. After creation, its length is fixed.
t4-arrays-1d-ids=Each element in an array is accessed by its numerical index.
t4-arrays-default-values=The elements of arrays are always set to default values wherever the array is created.
t4-arrays-md-h=Multi-dimensional arrays
t4-arraylist-h=ArrayList
t4-arraylist-h-1=ArrayList
t4-arraylist-p-1=
t4-arraylist-extends=The ArrayList class extends AbstractList and implements the List interface.
t4-arraylist-dynamic=ArrayList supports dynamic arrays that can grow as needed.
t4-arraylist-initial=Constructs an empty list with an initial capacity of ten.
t4-arraylist-objects=A collection is an object that can hold references to other objects.
t4-arraylist-h-2=ArrayList
t4-arraylist-p-2=
t4-arraylist-capacity=The capacity is the size of the underlying array that is used to store the elements.
t4-arraylist-size=Only function size() returns the number of ArrayList object elements.

t5-loops-h=Using Loop Constructs


t6-encapsulation-h=Working with Methods and Encapsulation
t6-encapsulation-h.title=Working with Methods and Encapsulation
t6-encapsulation-h2=Methods and Encapsulation
t6-create-methods=Create methods with arguments and return values
t6-create-methods-h2=Create methods
t6-static=Apply the static keyword to methods and fields
t6-static-h2=static keyword (for methods and fields)
t6-method-overloading=Create an overloaded method
t6-method-overloading-h2=Method overloading
t6-method-overloading-def=If a few methods of an one class have the same name but signatures that are not override-equivalent, then the method name is said to be overloaded.
t6-method-overloading-polymorphism=Method overloading is one of the ways that Java implements polymorphism.
t6-method-overloading-dinamic=When an overloaded method is invoked, Java uses the type and/or number of arguments as its guide to determine which version of the overloaded method to actually call.
t6-method-overloading-return-type=You can have two methods with the same arguments and different return types only if one of the methods is inherited and the return types are compatible.
t6-method-overloading-diff=A difference in return type only is not sufficient to constitute an overload and is illegal.
t6-method-overloading-signature=The method signature is the method's name and the parameter types.
t6-method-overloading-call=Overloaded methods may call one another simply by providing a normal method call with an appropriately formed argument list.
t6-consructors=Differentiate between default and user defined constructors
t6-consructors-h2=Constructors
t6-overload-consructors=Create and overload constructors
t6-overload-consructors-h2=Constructor overloading
t6-access-modifiers=Apply access modifiers
t6-access-modifiers=Access modifiers
t6-encapsulation-principles=Apply encapsulation principles to a class
t6-encapsulation-principles-h2=Encapsulation principles
t6-pass-by-value=Determine the effect upon object references and primitive values when they are passed into methods that change the values
t6-pass-by-value-h2=Pass by Value
	
		


t7-inheritance-h=Working with Inheritance

t8-exceptions-h=Handling Exceptions

examples-h=Examples
