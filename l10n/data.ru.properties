# Russian translation
# vim: ft=jproperties

exam-topics=Темы экзамена
section-exam-topics.title=Темы экзамена

t1-basics=Основы Java
t2-data-types=Working With Java Data Types
t3-operators-constructs=Using Operators and Decision Constructs
t4-arrays=Creating and Using Arrays
t5-loops=Using Loop Constructs
t6-encapsulation=Working with Methods and Encapsulation
t7-inheritance=Working with Inheritance
t8-exceptions=Handling Exceptions


t1-java-basics=Основы Java
t1-basics-h=Основы Java
t1-scope.title=Область видимости переменных
t1-scope-h2=Определение области видимости переменных
t1-scope-memory=Правильное использование области видимости позволяет программе экономить память и повторно ее использовать.
t1-scope-variables=Различные типы переменых имеют различные области видимости
t1-scope-two=В Java имеется две основные области видимости переменных - определяемые классом и методом (fields и variables).
t1-scope-variable-hiding-1=Локальные переменные скрывают переменные экземпляра.
t1-scope-variable-hiding-2=Переменная экземпляра класса скрывает наследуемую переменную родительского класса.
t1-scope-overriding-hiding=Переменная экземпляра класса скрывается а не переопределяется.
t1-scope-overriding-hiding.title=Пример переопределения-сокрытия переменных
t1-variables.title=Переменные
t1-variables-h=Переменные
t1-variables-4=Язык программирования Java определяет следующие типы переменных
t1-variables-4.title=Пример на переменные
t1-var-fileds=поля
t1-var-variables=переменные
t1-variable-element=Переменная - основной компонент хранения данных в Java программе.
t1-variable-memory=Переменная - это место в памяти, которому может быть присвоено значение.
t1-variable-change=Значение переменной может быть изменено.
t1-variable-composite=Переменная определяется комбинацией идентификатора, типа и необязательного начального значения.
t1-variable-scope=Все переменые имею область видимости, которая задает их видимость для других объектов, и продолжитльность существования.
t1-inst-var.title=Переменные экземпляра класса
t1-inst-var-h=Переменные экземпляра класса
t1-inst-var-def=Переменные экземпляра объявляются в классе, но вне любого метода конструктора или блока.

t2-data-types-h=Working With Java Data Types
t2-declare.title=Declare and initialize variables
t2-declare-h2=Declaring a Variable
t2-variables-declare=In Java, all variables must be declared before they can be used.


t3-operators-constructs-h=Using Operators and Decision Constructs

# Массивы
t4-arrays-section=Creating and Using Arrays
t4-arrays-section.title=Creating and Using Arrays
t4-arrays-h=Массивы
t4-arrays-p=Declare, instantiate, initialize and use:
t4-arrays-1d=a one-dimensional array
t4-arrays-md=multi-dimensional array
t4-arraylist=an ArrayList
t4-arrays-1d-h=One-dimensional arrays
t4-arrays-1d-object=An array is a container object that holds a fixed number of values of a single type.
t4-arrays-1d-length=The length of an array is established when the array is created. After creation, its length is fixed.
t4-arrays-1d-ids=Each element in an array is accessed by its numerical index.
t4-arrays-default-values=The elements of arrays are always set to default values wherever the array is created.
t4-arrays-md-h=Multi-dimensional arrays
t4-arraylist-h=ArrayList
t4-arraylist-h-1=ArrayList
t4-arraylist-p-1=
t4-arraylist-extends=The ArrayList class extends AbstractList and implements the List interface.
t4-arraylist-dynamic=ArrayList supports dynamic arrays that can grow as needed.
t4-arraylist-initial=Constructs an empty list with an initial capacity of ten.
t4-arraylist-objects=A collection is an object that can hold references to other objects.
t4-arraylist-h-2=ArrayList
t4-arraylist-p-2=
t4-arraylist-capacity=The capacity is the size of the underlying array that is used to store the elements.
t4-arraylist-size=Only function size() returns the number of ArrayList object elements.

t5-loops-h=Using Loop Constructs


t6-encapsulation-h=Working with Methods and Encapsulation
t6-encapsulation-h.title=Working with Methods and Encapsulation
t6-encapsulation-h2=Methods and Encapsulation
t6-create-methods=Create methods with arguments and return values
t6-create-methods-h2=Create methods
t6-static=Apply the static keyword to methods and fields
t6-static-h2=static keyword (for methods and fields)
t6-method-overloading=Создание перегруженных методов
t6-method-overloading-h2=Перегрузка методов
t6-method-overloading-def=Если несколько методов в классе имеют одинаковые имена но разные сигнатуры, то они считаются перегруженными.
t6-method-overloading-polymorphism=Перегрузка методов - это один из способов поддержки полиморфизма в Java.
t6-method-overloading-dinamic=При вызове перегруженного метода для определения нужной версии Java использует тип и/или количество apryментов метода.
t6-method-overloading-return-type=Возможно иметь два метода с одинаковым перечнем аргументов и различными возвращаемыми типами, если один из методов унаследован, а возвращаемый тип его совместим.
t6-method-overloading-diff=Методы не могут отличаться только возвращаемыми типами, чтобы законно считаться перегруженными.
t6-method-overloading-signature=Сигнатура метода представляет собой совокупность имени метода и типов входных параметров.
t6-method-overloading-call=Перегруженные методы могут вызывать один другой, используя соотв. образом составленный перечень аргументов.
t6-consructors=Differentiate between default and user defined constructors
t6-consructors-h2=Constructors
t6-overload-consructors=Create and overload constructors
t6-overload-consructors-h2=Constructor overloading
t6-access-modifiers=Apply access modifiers
t6-access-modifiers=Access modifiers
t6-encapsulation-principles=Apply encapsulation principles to a class
t6-encapsulation-principles-h2=Encapsulation principles
t6-pass-by-value=Determine the effect upon object references and primitive values when they are passed into methods that change the values
t6-pass-by-value-h2=Pass by Value


t7-inheritance-h=Working with Inheritance

t8-exceptions-h=Handling Exceptions

examples-h=Примеры